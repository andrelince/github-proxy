// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/andrelince/github-proxy/pkg/ghcli (interfaces: GithubClient)
//
// Generated by this command:
//
//	mockgen -destination=./mocks/mock_github_client.go -package=ghcli_mocks github.com/andrelince/github-proxy/pkg/ghcli GithubClient
//

// Package ghcli_mocks is a generated GoMock package.
package ghcli_mocks

import (
	context "context"
	reflect "reflect"

	ghcli "github.com/andrelince/github-proxy/pkg/ghcli"
	gomock "go.uber.org/mock/gomock"
)

// MockGithubClient is a mock of GithubClient interface.
type MockGithubClient struct {
	ctrl     *gomock.Controller
	recorder *MockGithubClientMockRecorder
	isgomock struct{}
}

// MockGithubClientMockRecorder is the mock recorder for MockGithubClient.
type MockGithubClientMockRecorder struct {
	mock *MockGithubClient
}

// NewMockGithubClient creates a new mock instance.
func NewMockGithubClient(ctrl *gomock.Controller) *MockGithubClient {
	mock := &MockGithubClient{ctrl: ctrl}
	mock.recorder = &MockGithubClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGithubClient) EXPECT() *MockGithubClientMockRecorder {
	return m.recorder
}

// CreateRepository mocks base method.
func (m *MockGithubClient) CreateRepository(ctx context.Context, in ghcli.RepositoryInput) (ghcli.Repository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRepository", ctx, in)
	ret0, _ := ret[0].(ghcli.Repository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRepository indicates an expected call of CreateRepository.
func (mr *MockGithubClientMockRecorder) CreateRepository(ctx, in any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRepository", reflect.TypeOf((*MockGithubClient)(nil).CreateRepository), ctx, in)
}

// DeleteRepository mocks base method.
func (m *MockGithubClient) DeleteRepository(ctx context.Context, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRepository", ctx, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRepository indicates an expected call of DeleteRepository.
func (mr *MockGithubClientMockRecorder) DeleteRepository(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRepository", reflect.TypeOf((*MockGithubClient)(nil).DeleteRepository), ctx, name)
}

// ListRepositories mocks base method.
func (m *MockGithubClient) ListRepositories(ctx context.Context) ([]ghcli.Repository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRepositories", ctx)
	ret0, _ := ret[0].([]ghcli.Repository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRepositories indicates an expected call of ListRepositories.
func (mr *MockGithubClientMockRecorder) ListRepositories(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRepositories", reflect.TypeOf((*MockGithubClient)(nil).ListRepositories), ctx)
}
